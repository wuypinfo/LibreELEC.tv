From fe6d6ae16652e2a5fe64cf603405f5daa776d844 Mon Sep 17 00:00:00 2001
From: Jonas Karlman <jonas@kwiboo.se>
Date: Sun, 20 Oct 2019 10:06:14 +0000
Subject: [PATCH] DRMPRIME: add support for descriptor with multiple layers

---
 cmake/modules/FindFFMPEG.cmake                | 15 +++++++
 .../HwDecRender/DRMPRIMEEGL.cpp               | 35 +++++++++++++---
 .../HwDecRender/VideoLayerBridgeDRMPRIME.cpp  | 41 +++++++++++++------
 3 files changed, 73 insertions(+), 18 deletions(-)

diff --git a/cmake/modules/FindFFMPEG.cmake b/cmake/modules/FindFFMPEG.cmake
index ef74671d4002..0d7719f0b269 100644
--- a/cmake/modules/FindFFMPEG.cmake
+++ b/cmake/modules/FindFFMPEG.cmake
@@ -166,6 +166,17 @@ if(NOT ENABLE_INTERNAL_FFMPEG OR KODI_DEPENDSBUILD)
                                                     FFMPEG_VERSION
                                       FAIL_MESSAGE "FFmpeg ${REQUIRED_FFMPEG_VERSION} not found, please consider using -DENABLE_INTERNAL_FFMPEG=ON")
 
+    include(CheckCSourceCompiles)
+    set(CMAKE_REQUIRED_INCLUDES ${FFMPEG_INCLUDE_DIRS})
+    check_c_source_compiles("#include <libavutil/hwcontext_drm.h>
+
+                             int main()
+                             {
+                               AVDRMFrameDescriptor test;
+                               return test.format;
+                             }
+                             " FFMPEG_HAS_AVDRMFRAMEDESCRIPTOR_FORMAT)
+
   else()
     message(STATUS "FFmpeg ${REQUIRED_FFMPEG_VERSION} not found, falling back to internal build")
     unset(FFMPEG_INCLUDE_DIRS)
@@ -195,6 +206,10 @@ if(NOT ENABLE_INTERNAL_FFMPEG OR KODI_DEPENDSBUILD)
                          ${FFMPEG_LIBPOSTPROC} ${FFMPEG_LDFLAGS})
     list(APPEND FFMPEG_DEFINITIONS -DFFMPEG_VER_SHA=\"${FFMPEG_VERSION}\")
 
+    if(FFMPEG_HAS_AVDRMFRAMEDESCRIPTOR_FORMAT)
+      list(APPEND FFMPEG_DEFINITIONS -DHAVE_AVDRMFRAMEDESCRIPTOR_FORMAT=1)
+    endif()
+
     if(NOT TARGET ffmpeg)
       add_library(ffmpeg ${FFMPEG_LIB_TYPE} IMPORTED)
       set_target_properties(ffmpeg PROPERTIES
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/DRMPRIMEEGL.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/DRMPRIMEEGL.cpp
index 1dd75952bbf8..9b1c56c0eda3 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/DRMPRIMEEGL.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/DRMPRIMEEGL.cpp
@@ -31,22 +31,45 @@ bool CDRMPRIMETexture::Map(CVideoBufferDRMPRIME* buffer)
   AVDRMFrameDescriptor* descriptor = buffer->GetDescriptor();
   if (descriptor && descriptor->nb_layers)
   {
-    AVDRMLayerDescriptor* layer = &descriptor->layers[0];
+    // get drm format of the frame
+#ifdef HAVE_AVDRMFRAMEDESCRIPTOR_FORMAT
+    uint32_t format = descriptor->format;
+#else
+    uint32_t format = 0;
+#endif
+    if (!format && descriptor->nb_layers == 1)
+      format = descriptor->layers[0].format;
+    if (!format)
+    {
+      CLog::Log(LOGERROR, "CDRMPRIMETexture::{} - failed to determine format", __FUNCTION__);
+      return false;
+    }
 
     std::array<CEGLImage::EglPlane, CEGLImage::MAX_NUM_PLANES> planes;
 
-    for (int i = 0; i < layer->nb_planes; i++)
+    int index = 0;
+    for (int i = 0; i < descriptor->nb_layers; i++)
     {
-      planes[i].fd = descriptor->objects[layer->planes[i].object_index].fd;
-      planes[i].offset = layer->planes[i].offset;
-      planes[i].pitch = layer->planes[i].pitch;
+      AVDRMLayerDescriptor* layer = &descriptor->layers[i];
+      for (int j = 0; j < layer->nb_planes; j++)
+      {
+        AVDRMPlaneDescriptor* plane = &layer->planes[j];
+        AVDRMObjectDescriptor* object = &descriptor->objects[plane->object_index];
+
+        planes[index].fd = object->fd;
+        planes[index].modifier = object->format_modifier;
+        planes[index].offset = plane->offset;
+        planes[index].pitch = plane->pitch;
+
+        index++;
+      }
     }
 
     CEGLImage::EglAttrs attribs;
 
     attribs.width = m_texWidth;
     attribs.height = m_texHeight;
-    attribs.format = layer->format;
+    attribs.format = format;
     attribs.colorSpace = GetColorSpace(DRMPRIME::GetColorEncoding(buffer->GetPicture()));
     attribs.colorRange = GetColorRange(DRMPRIME::GetColorRange(buffer->GetPicture()));
     attribs.planes = planes;
diff --git a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp
index ae3557e84a3e..46dc6b674e48 100644
--- a/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp
+++ b/xbmc/cores/VideoPlayer/VideoRenderers/HwDecRender/VideoLayerBridgeDRMPRIME.cpp
@@ -80,6 +80,20 @@ bool CVideoLayerBridgeDRMPRIME::Map(CVideoBufferDRMPRIME* buffer)
   uint64_t modifier[4] = {0};
   int ret;
 
+  // get drm format of the frame
+#ifdef HAVE_AVDRMFRAMEDESCRIPTOR_FORMAT
+  uint32_t format = descriptor->format;
+#else
+  uint32_t format = 0;
+#endif
+  if (!format && descriptor->nb_layers == 1)
+    format = descriptor->layers[0].format;
+  if (!format)
+  {
+    CLog::Log(LOGERROR, "CVideoLayerBridgeDRMPRIME::{} - failed to determine format", __FUNCTION__);
+    return false;
+  }
+
   // convert Prime FD to GEM handle
   for (int object = 0; object < descriptor->nb_objects; object++)
   {
@@ -95,18 +109,21 @@ bool CVideoLayerBridgeDRMPRIME::Map(CVideoBufferDRMPRIME* buffer)
     }
   }
 
-  AVDRMLayerDescriptor* layer = &descriptor->layers[0];
-
-  for (int plane = 0; plane < layer->nb_planes; plane++)
+  int index = 0;
+  for (int i = 0; i < descriptor->nb_layers; i++)
   {
-    int object = layer->planes[plane].object_index;
-    uint32_t handle = buffer->m_handles[object];
-    if (handle && layer->planes[plane].pitch)
+    AVDRMLayerDescriptor* layer = &descriptor->layers[i];
+    for (int j = 0; j < layer->nb_planes; j++)
     {
-      handles[plane] = handle;
-      pitches[plane] = layer->planes[plane].pitch;
-      offsets[plane] = layer->planes[plane].offset;
-      modifier[plane] = descriptor->objects[object].format_modifier;
+      AVDRMPlaneDescriptor* plane = &layer->planes[j];
+      int object = plane->object_index;
+
+      handles[index] = buffer->m_handles[object];
+      pitches[index] = plane->pitch;
+      offsets[index] = plane->offset;
+      modifier[index] = descriptor->objects[object].format_modifier;
+
+      index++;
     }
   }
 
@@ -115,8 +132,8 @@ bool CVideoLayerBridgeDRMPRIME::Map(CVideoBufferDRMPRIME* buffer)
 
   // add the video frame FB
   ret = drmModeAddFB2WithModifiers(m_DRM->GetFileDescriptor(), buffer->GetWidth(),
-                                   buffer->GetHeight(), layer->format, handles, pitches, offsets,
-                                   modifier, &buffer->m_fb_id, flags);
+                                   buffer->GetHeight(), format, handles, pitches, offsets, modifier,
+                                   &buffer->m_fb_id, flags);
   if (ret < 0)
   {
     CLog::Log(LOGERROR, "CVideoLayerBridgeDRMPRIME::{} - failed to add fb {}, ret = {}",
