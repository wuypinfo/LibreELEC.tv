# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2019-present Team LibreELEC (https://libreelec.tv)

if [ "$PLATFORM" = "RK" ]; then
PKG_RKBIN="$(get_build_dir rkbin)"
PKG_SOC=$UBOOT_SYSTEM

case "$PKG_SOC" in
  rk3036)
    PKG_DATAFILE="spl/u-boot-spl-nodtb.bin"
    PKG_LOADER="u-boot-dtb.bin"
    ;;
  rk3288)
    PKG_DATAFILE="$PKG_RKBIN/rk32/rk3288_ddr_400MHz_v1.08.bin"
    PKG_LOADER="$PKG_RKBIN/rk32/rk3288_miniloader_v2.58.bin"
    PKG_LOAD_ADDR="0x0"
    ;;
  rk3328)
    PKG_DATAFILE="$PKG_RKBIN/rk33/rk3328_ddr_933MHz_v1.16.bin"
    PKG_LOADER="$PKG_RKBIN/rk33/rk3328_miniloader_v2.50.bin"
    PKG_BL31="$PKG_RKBIN/rk33/rk3328_bl31_v1.42.elf"
    PKG_BL31_ADDR="0x10000"
    PKG_LOAD_ADDR="0x200000"
    ;;
  rk3399-rpi4)
    PKG_DATAFILE="$PKG_RKBIN/rk33/rk3399_ddr_800MHz_v1.17.bin"
    PKG_LOADER="$PKG_RKBIN/rk33/rk3399_miniloader_v1.24.bin"
    PKG_BL31="$PKG_RKBIN/rk33/rk3399_bl31_v1.31.elf"
    PKG_BL31_ADDR="0x40000"
    PKG_LOAD_ADDR="0x200000"
    ;;
  rk3399)
    PKG_DATAFILE="$PKG_RKBIN/rk33/rk3399_ddr_800MHz_v1.17.bin"
    PKG_LOADER="$PKG_RKBIN/rk33/rk3399_miniloader_v1.24.bin"
    PKG_BL31="$PKG_RKBIN/rk33/rk3399_bl31_v1.31.elf"
    PKG_BL31_ADDR="0x40000"
    PKG_LOAD_ADDR="0x200000"
    ;;
  *)
    PKG_DATAFILE="spl/u-boot-spl-dtb.bin"
    PKG_LOADER="u-boot-dtb.bin"
    ;;
esac

INSTALL_UBOOT="$INSTALL/usr/share/bootloader/u-boot"
mkdir -p $INSTALL_UBOOT

if [ -n "$PKG_DATAFILE" -a -n "$PKG_LOADER" ]; then
  tools/mkimage -n $PKG_SOC -T rksd -d "$PKG_DATAFILE" idbloader.img
  cat "$PKG_LOADER" >> idbloader.img
  cp -av idbloader.img $INSTALL_UBOOT
fi

if [ -n "$PKG_LOAD_ADDR" ]; then
  qemu-x86_64 $PKG_RKBIN/tools/loaderimage --pack --uboot u-boot-dtb.bin uboot.img $PKG_LOAD_ADDR
  cp -av uboot.img $INSTALL_UBOOT
fi

if [ -n "$PKG_BL31" ]; then
  cat >trust.ini <<EOF
[BL30_OPTION]
SEC=0
[BL31_OPTION]
SEC=1
PATH=$PKG_BL31
ADDR=$PKG_BL31_ADDR
[BL32_OPTION]
SEC=0
[BL33_OPTION]
SEC=0
[OUTPUT]
PATH=trust.img
EOF
  qemu-x86_64 $PKG_RKBIN/tools/trust_merger --verbose trust.ini
  cp -av trust.img $INSTALL_UBOOT
fi

elif [ "$PLATFORM" = "AML" ]; then

echo "$BOOTLOADER: creating u-boot.bin"

DESTDIR="$PKG_BUILD/fip"
mkdir -p $DESTDIR

FIPDIR="$(get_build_dir amlogic-boot-fip)/$UBOOT_SYSTEM"

case "${UBOOT_SYSTEM}" in
  box|"")
    # no-op, use vendor booloader
    ;;

  khadas-vim3*)
    if [ "$UBOOT_SYSTEM" = "khadas-vim3" ]; then
      AML_ENCRYPT_BIN="aml_encrypt_g12b"
    else
      AML_ENCRYPT_BIN="aml_encrypt_g12a"
    fi
    cp $FIPDIR/bl301.bin $DESTDIR/
    cp $FIPDIR/acs.bin $DESTDIR/
    cp $FIPDIR/aml_ddr.fw $DESTDIR/
    cp $FIPDIR/bl2.bin $DESTDIR/
    cp $FIPDIR/bl30.bin $DESTDIR/
    cp $FIPDIR/bl31.img $DESTDIR/
    cp $FIPDIR/blx_fix.sh $DESTDIR/
    cp $FIPDIR/ddr3_1d.fw $DESTDIR/
    cp $FIPDIR/ddr4_1d.fw $DESTDIR/
    cp $FIPDIR/ddr4_2d.fw $DESTDIR/
    cp $FIPDIR/diag_lpddr4.fw $DESTDIR/
    cp $FIPDIR/lpddr3_1d.fw $DESTDIR/
    cp $FIPDIR/lpddr4_1d.fw $DESTDIR/
    cp $FIPDIR/lpddr4_2d.fw $DESTDIR/
    cp $FIPDIR/piei.fw $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30

    $FIPDIR/blx_fix.sh $DESTDIR/bl2.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/acs.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2

    qemu-x86_64 $FIPDIR/$AML_ENCRYPT_BIN --bl30sig --input $DESTDIR/bl30_new.bin \
                                       --output $DESTDIR/bl30_new.bin.g12a.enc \
                                       --level v3
    qemu-x86_64 $FIPDIR/$AML_ENCRYPT_BIN --bl3sig  --input $DESTDIR/bl30_new.bin.g12a.enc \
                                       --output $DESTDIR/bl30_new.bin.enc \
                                       --level v3 --type bl30
    qemu-x86_64 $FIPDIR/$AML_ENCRYPT_BIN --bl3sig  --input $DESTDIR/bl31.img \
                                       --output $DESTDIR/bl31.img.enc \
                                       --level v3 --type bl31
    qemu-x86_64 $FIPDIR/$AML_ENCRYPT_BIN --bl3sig  --input $DESTDIR/bl33.bin --compress lz4 \
                                       --output $DESTDIR/bl33.bin.enc \
                                       --level v3 --type bl33 --compress lz4
    qemu-x86_64 $FIPDIR/$AML_ENCRYPT_BIN --bl2sig  --input $DESTDIR/bl2_new.bin \
                                       --output $DESTDIR/bl2.n.bin.sig
    qemu-x86_64 $FIPDIR/$AML_ENCRYPT_BIN --bootmk \
                             --output $DESTDIR/u-boot.bin \
                             --bl2 $DESTDIR/bl2.n.bin.sig \
                             --bl30 $DESTDIR/bl30_new.bin.enc \
                             --bl31 $DESTDIR/bl31.img.enc \
                             --bl33 $DESTDIR/bl33.bin.enc \
                             --ddrfw1 $DESTDIR/ddr4_1d.fw \
                             --ddrfw2 $DESTDIR/ddr4_2d.fw \
                             --ddrfw3 $DESTDIR/ddr3_1d.fw \
                             --ddrfw4 $DESTDIR/piei.fw \
                             --ddrfw5 $DESTDIR/lpddr4_1d.fw \
                             --ddrfw6 $DESTDIR/lpddr4_2d.fw \
                             --ddrfw7 $DESTDIR/diag_lpddr4.fw \
                             --ddrfw8 $DESTDIR/aml_ddr.fw \
                             --ddrfw9 $DESTDIR/lpddr3_1d.fw \
                             --level v3
    ;;

  odroid-c2)
    qemu-x86_64 $FIPDIR/fip_create --bl30 $FIPDIR/bl30.bin \
                       --bl301 $FIPDIR/bl301.bin \
                       --bl31 $FIPDIR/bl31.bin \
                       --bl33 $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/fip.bin

    qemu-x86_64 $FIPDIR/fip_create --dump $DESTDIR/fip.bin

    cat $FIPDIR/bl2.package $DESTDIR/fip.bin > $DESTDIR/boot_new.bin

    qemu-x86_64 $FIPDIR/aml_encrypt_gxb --bootsig --input $DESTDIR/boot_new.bin --output $DESTDIR/u-boot.img
    dd if=$DESTDIR/u-boot.img of=$DESTDIR/u-boot.gxbb bs=512 skip=96
    dd if=$FIPDIR/bl1.bin.hardkernel of=$DESTDIR/u-boot.bin.sd.bin conv=fsync,notrunc bs=1 count=442
    dd if=$FIPDIR/bl1.bin.hardkernel of=$DESTDIR/u-boot.bin.sd.bin conv=fsync,notrunc bs=512 skip=1 seek=1
    dd if=$DESTDIR/u-boot.gxbb of=$DESTDIR/u-boot.bin.sd.bin conv=fsync,notrunc bs=512 seek=97
    ;;

  amlg12)
    FIPDIR="$(get_build_dir amlogic-boot-fip)/odroid-n2"
    cp $FIPDIR/bl301.bin $DESTDIR/
    cp $FIPDIR/acs.bin $DESTDIR/
    cp $FIPDIR/aml_ddr.fw $DESTDIR/
    cp $FIPDIR/bl2.bin $DESTDIR/
    cp $FIPDIR/bl30.bin $DESTDIR/
    cp $FIPDIR/bl31.img $DESTDIR/
    cp $FIPDIR/blx_fix.sh $DESTDIR/
    cp $FIPDIR/ddr3_1d.fw $DESTDIR/
    cp $FIPDIR/ddr4_1d.fw $DESTDIR/
    cp $FIPDIR/ddr4_2d.fw $DESTDIR/
    cp $FIPDIR/diag_lpddr4.fw $DESTDIR/
    cp $FIPDIR/lpddr4_1d.fw $DESTDIR/
    cp $FIPDIR/lpddr4_2d.fw $DESTDIR/
    cp $FIPDIR/piei.fw $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30

    $FIPDIR/blx_fix.sh $DESTDIR/bl2.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/acs.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2

    qemu-x86_64 $FIPDIR/aml_encrypt_g12b --bl30sig --input $DESTDIR/bl30_new.bin \
                                       --output $DESTDIR/bl30_new.bin.g12a.enc \
                                       --level v3
    qemu-x86_64 $FIPDIR/aml_encrypt_g12b --bl3sig  --input $DESTDIR/bl30_new.bin.g12a.enc \
                                       --output $DESTDIR/bl30_new.bin.enc \
                                       --level v3 --type bl30
    qemu-x86_64 $FIPDIR/aml_encrypt_g12b --bl3sig  --input $DESTDIR/bl31.img \
                                       --output $DESTDIR/bl31.img.enc \
                                       --level v3 --type bl31
    qemu-x86_64 $FIPDIR/aml_encrypt_g12b --bl3sig  --input $DESTDIR/bl33.bin --compress lz4 \
                                       --output $DESTDIR/bl33.bin.enc \
                                       --level v3 --type bl33 --compress lz4
    qemu-x86_64 $FIPDIR/aml_encrypt_g12b --bl2sig  --input $DESTDIR/bl2_new.bin \
                                       --output $DESTDIR/bl2.n.bin.sig
    qemu-x86_64 $FIPDIR/aml_encrypt_g12b --bootmk \
                             --output $DESTDIR/u-boot.bin \
                             --bl2 $DESTDIR/bl2.n.bin.sig \
                             --bl30 $DESTDIR/bl30_new.bin.enc \
                             --bl31 $DESTDIR/bl31.img.enc \
                             --bl33 $DESTDIR/bl33.bin.enc \
                             --ddrfw1 $DESTDIR/ddr4_1d.fw \
                             --ddrfw2 $DESTDIR/ddr4_2d.fw \
                             --ddrfw3 $DESTDIR/ddr3_1d.fw \
                             --ddrfw4 $DESTDIR/piei.fw \
                             --ddrfw5 $DESTDIR/lpddr4_1d.fw \
                             --ddrfw6 $DESTDIR/lpddr4_2d.fw \
                             --ddrfw7 $DESTDIR/diag_lpddr4.fw \
                             --ddrfw8 $DESTDIR/aml_ddr.fw \
                             --level v3
    ;;

  nanopi-k2)
    cp $FIPDIR/bl2.bin $DESTDIR/
    cp $FIPDIR/acs.bin $DESTDIR/
    cp $FIPDIR/bl21.bin $DESTDIR/
    cp $FIPDIR/bl30.bin $DESTDIR/
    cp $FIPDIR/bl301.bin $DESTDIR/
    cp $FIPDIR/bl31.img $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30

    qemu-x86_64 $FIPDIR/fip_create --bl30 $DESTDIR/bl30_new.bin \
                       --bl31 $DESTDIR/bl31.img \
                       --bl33 $DESTDIR/bl33.bin \
                              $DESTDIR/fip.bin

    qemu-x86_64 $FIPDIR/fip_create --dump $DESTDIR/fip.bin

    python3 $FIPDIR/acs_tool.py $DESTDIR/bl2.bin \
                                $DESTDIR/bl2_acs.bin \
                                $DESTDIR/acs.bin 0

    $FIPDIR/blx_fix.sh $DESTDIR/bl2_acs.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/bl21.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2

    cat $DESTDIR/bl2_new.bin $DESTDIR/fip.bin > $DESTDIR/boot_new.bin

    qemu-x86_64 $FIPDIR/aml_encrypt_gxb --bootsig --input $DESTDIR/boot_new.bin --output $DESTDIR/u-boot.bin
    ;;

  amlgxbb)
    FIPDIR="$(get_build_dir amlogic-boot-fip)/wetek-play2"
    cp $FIPDIR/bl2.bin $DESTDIR/
    cp $FIPDIR/acs.bin $DESTDIR/
    cp $FIPDIR/bl21.bin $DESTDIR/
    cp $FIPDIR/bl30.bin $DESTDIR/
    cp $FIPDIR/bl301.bin $DESTDIR/
    cp $FIPDIR/bl31.img $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30

    qemu-x86_64 $FIPDIR/fip_create --bl30 $DESTDIR/bl30_new.bin \
                       --bl31 $DESTDIR/bl31.img \
                       --bl33 $DESTDIR/bl33.bin \
                              $DESTDIR/fip.bin

    qemu-x86_64 $FIPDIR/fip_create --dump $DESTDIR/fip.bin

    python3 $FIPDIR/acs_tool.py $DESTDIR/bl2.bin \
                                $DESTDIR/bl2_acs.bin \
                                $DESTDIR/acs.bin 0

    $FIPDIR/blx_fix.sh $DESTDIR/bl2_acs.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/bl21.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2

    cat $DESTDIR/bl2_new.bin $DESTDIR/fip.bin > $DESTDIR/boot_new.bin

    qemu-x86_64 $FIPDIR/aml_encrypt_gxb --bootsig --input $DESTDIR/boot_new.bin --output $DESTDIR/u-boot.bin
    ;;

  *) # GXL/GXM
    FIPDIR="$(get_build_dir amlogic-boot-fip)/p212"
    cp $FIPDIR/bl2.bin $DESTDIR/
    cp $FIPDIR/acs.bin $DESTDIR/
    cp $FIPDIR/bl21.bin $DESTDIR/
    cp $FIPDIR/bl30.bin $DESTDIR/
    cp $FIPDIR/bl301.bin $DESTDIR/
    cp $FIPDIR/bl31.img $DESTDIR/
    cp $(get_build_dir $BOOTLOADER)/u-boot.bin $DESTDIR/bl33.bin

    $FIPDIR/blx_fix.sh $DESTDIR/bl30.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl30_zero.bin \
                       $DESTDIR/bl301.bin \
                       $DESTDIR/bl301_zero.bin \
                       $DESTDIR/bl30_new.bin bl30

    python3 $FIPDIR/acs_tool.py $DESTDIR/bl2.bin $DESTDIR/bl2_acs.bin $DESTDIR/acs.bin 0

    $FIPDIR/blx_fix.sh $DESTDIR/bl2_acs.bin \
                       $DESTDIR/zero_tmp \
                       $DESTDIR/bl2_zero.bin \
                       $DESTDIR/bl21.bin \
                       $DESTDIR/bl21_zero.bin \
                       $DESTDIR/bl2_new.bin bl2

    qemu-x86_64 $FIPDIR/aml_encrypt_gxl --bl3enc --input $DESTDIR/bl30_new.bin
    qemu-x86_64 $FIPDIR/aml_encrypt_gxl --bl3enc --input $DESTDIR/bl31.img
    qemu-x86_64 $FIPDIR/aml_encrypt_gxl --bl3enc --input $DESTDIR/bl33.bin
    qemu-x86_64 $FIPDIR/aml_encrypt_gxl --bl2sig --input $DESTDIR/bl2_new.bin --output $DESTDIR/bl2.n.bin.sig
    qemu-x86_64 $FIPDIR/aml_encrypt_gxl --bootmk --output $DESTDIR/u-boot.bin --bl2 $DESTDIR/bl2.n.bin.sig --bl30 $DESTDIR/bl30_new.bin.enc --bl31 $DESTDIR/bl31.img.enc --bl33 $DESTDIR/bl33.bin.enc
    ;;

esac

# Clean up after previous build
rm -rf $INSTALL/usr/share/bootloader/boot.ini
rm -rf $INSTALL/usr/share/bootloader/u-boot*

# Install u-boot
mkdir -p $INSTALL/usr/share/bootloader

if [ -f $DESTDIR/u-boot.bin.sd.bin ]; then
  cp -av $DESTDIR/u-boot.bin.sd.bin $INSTALL/usr/share/bootloader
fi
if [ -f $DESTDIR/u-boot.bin ]; then
  cp -av $DESTDIR/u-boot.bin $INSTALL/usr/share/bootloader
fi

# Install boot.ini if it exists
if find_file_path bootloader/${UBOOT_SYSTEM}.ini; then
  cp -av ${FOUND_PATH} $INSTALL/usr/share/bootloader/boot.ini
fi

elif [ "$PLATFORM" = "AW" ]; then
INSTALL_UBOOT="$INSTALL/usr/share/bootloader/u-boot"
mkdir -p $INSTALL_UBOOT
cp -av u-boot-sunxi-with-spl.bin $INSTALL_UBOOT
fi
