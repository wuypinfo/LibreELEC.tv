# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2019-present Team LibreELEC (https://libreelec.tv)

. config/options ""

if [ "$PLATFORM" = "RK" ]; then

INSTBOOT_DIR=$RELEASE_DIR/3rdparty/bootloader/u-boot
if [ -f "$INSTBOOT_DIR/idbloader.img" ]; then
  echo "image: burn idbloader.img to image..."
  dd if="$INSTBOOT_DIR/idbloader.img" of="$DISK" bs=32k seek=1 conv=fsync,notrunc >"$SAVE_ERROR" 2>&1 || show_error
fi
if [ -f "$INSTBOOT_DIR/uboot.img" ]; then
  echo "image: burn uboot.img to image..."
  dd if="$INSTBOOT_DIR/uboot.img" of="$DISK" bs=64k seek=128 conv=fsync,notrunc >"$SAVE_ERROR" 2>&1 || show_error
fi
if [ -f "$INSTBOOT_DIR/trust.img" ]; then
  echo "image: burn trust.img to image..."
  dd if="$INSTBOOT_DIR/trust.img" of="$DISK" bs=64k seek=192 conv=fsync,notrunc >"$SAVE_ERROR" 2>&1 || show_error
fi

#mkdir -p "$RELEASE_DIR/3rdparty/bootloader/u-boot"
for file_ini in $RELEASE_DIR/3rdparty/bootloader/* ; do
  [ -e "$file_ini" ] && mcopy -s "$file_ini" ::
done

DTB="$(${SCRIPTS}/uboot_helper ${PROJECT} ${DEVICE} ${UBOOT_SYSTEM} dtb)"

#echo "image: copying device tree"
#  mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/dtb ::

echo "image: creating uEnv.txt"
cat << EOF > "${LE_TMP}/uEnv.txt"
FDT=/dtb/rockchip/${DTB}
LINUX=/${KERNEL_NAME}
APPEND=boot=LABEL=${DISTRO_BOOTLABEL} disk=LABEL=${DISTRO_DISKLABEL} quiet ${EXTRA_CMDLINE}
EOF
mcopy -s "${LE_TMP}/uEnv.txt" ::

#echo "image: copying instboot"
#mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/*.sh ::

#echo "image: copying autoscript files"
#mcopy -s -o ${RELEASE_DIR}/3rdparty/bootloader/*.scr ::

elif [ "$PLATFORM" = "AML" ]; then

DTB="$(${SCRIPTS}/uboot_helper ${PROJECT} ${DEVICE} ${UBOOT_SYSTEM} dtb)"

echo "image: copying device tree"
  mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/dtb ::

echo "image: creating uEnv.txt"
cat << EOF > "${LE_TMP}/uEnv.txt"
FDT=/dtb/amlogic/${DTB}
LINUX=/${KERNEL_NAME}
APPEND=boot=LABEL=${DISTRO_BOOTLABEL} disk=LABEL=${DISTRO_DISKLABEL} quiet ${EXTRA_CMDLINE}
EOF
  mcopy -s "${LE_TMP}/uEnv.txt" ::

echo "image: copying instboot"
  mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/*.sh ::

mkimage_uboot(){
  echo "image: writing u-boot to $(basename $DISK)"
  dd if="$INSTALL/usr/share/bootloader/u-boot.bin.sd.bin" of="$DISK" conv=fsync,notrunc bs=1 count=444 >"$SAVE_ERROR" 2>&1 || show_error
  dd if="$INSTALL/usr/share/bootloader/u-boot.bin.sd.bin" of="$DISK" conv=fsync,notrunc bs=512 skip=1 seek=1 >"$SAVE_ERROR" 2>&1 || show_error
}

mkimage_autoscripts(){
  echo "image: copying autoscript files"
  mcopy -s -o ${RELEASE_DIR}/3rdparty/bootloader/*autoscript ::
  mcopy -s -o ${RELEASE_DIR}/3rdparty/bootloader/*.scr ::
  touch "$RELEASE_DIR/3rdparty/bootloader/aml_autoscript.zip"
}

mkimage_autoscripts-c2(){
  echo "image: copying autoscript files for odroid-c2"
  mcopy -s -o ${RELEASE_DIR}/3rdparty/bootloader/boot-c2.scr ::boot.scr
}

mkimage_uboot-ext(){
  echo "image: copying u-boot-new file"
  mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/u-boot.sd ::
  mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/u-boot.usb ::
}

mkimage_boot-ini(){
  echo "image: copying boot.ini"
  mcopy -s ${RELEASE_DIR}/3rdparty/bootloader/boot.ini ::
}

case "${UBOOT_SYSTEM}" in
  amlg12)
    mkimage_uboot
    mkimage_autoscripts
    mkimage_uboot-ext
    mkimage_boot-ini
    ;;
  amlgx)
    mkimage_uboot
    mkimage_autoscripts
    mkimage_boot-ini
    ;;
  odroid-c2|nanopi-k2)
    mkimage_uboot
    mkimage_autoscripts-c2
    ;;
  amlgxbb)
    mkimage_uboot
    mkimage_autoscripts
    ;;
  *)
    mkimage_uboot
    ;;
esac

elif [ "$PLATFORM" = "AW" ]; then

INSTBOOT_DIR=$RELEASE_DIR/3rdparty/bootloader/u-boot
if [ -f "$INSTBOOT_DIR/u-boot-sunxi-with-spl.bin" ]; then
  echo "Writing U-Boot to $(basename $DISK)"
  dd if="$INSTBOOT_DIR/u-boot-sunxi-with-spl.bin" of="$DISK" bs=1k seek=8 conv=fsync,notrunc >"$SAVE_ERROR" 2>&1 || show_error
fi

for file_ini in $RELEASE_DIR/3rdparty/bootloader/* ; do
  [ -e "$file_ini" ] && mcopy -s "$file_ini" ::
done

DTB="$(${SCRIPTS}/uboot_helper ${PROJECT} ${DEVICE} ${UBOOT_SYSTEM} dtb)"

echo "image: creating uEnv.txt"
cat << EOF > "${LE_TMP}/uEnv.txt"
FDT=/dtb/allwinner/${DTB}
LINUX=/${KERNEL_NAME}
APPEND=boot=LABEL=${DISTRO_BOOTLABEL} disk=LABEL=${DISTRO_DISKLABEL} quiet ${EXTRA_CMDLINE}
EOF
mcopy -s "${LE_TMP}/uEnv.txt" ::

fi
