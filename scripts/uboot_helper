#!/usr/bin/env python3

# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2017-present Team LibreELEC (https://libreelec.tv)

import sys

# When adding new devices to the list please keep them in alphabetical order
# board-name should contain 'dashes' (-) not 'underscores' (_) and shouldn't contain capitals
# you can check the formating using an online tool such as https://codebeautify.org/python-formatter-beautifier

#  'project' : {
#    'device' : {
#      'board-name' : {
#        'dtb' : 'board-name.dtb',
#        'config' : 'board_name_defconfig'
#      },
#    },
#  },

devices = \
{
  'ARM': {
    'ARM-ALL': {
      'amlg12': {
        'dtb': 'meson-g12b-odroid-n2.dtb',
        'config': 'odroid-n2_defconfig'
      },
      'amlgx': {
        'dtb': 'meson-gxl-s905x-p212.dtb',
        'config': 'p212_defconfig'
      },
      'amlgxbb': {
        'dtb': 'meson-gxbb-wetek-play2.dtb',
        'config': 'wetek-play2_defconfig'
      },
      'lepotato': {
        'dtb': 'meson-gxl-s905x-libretech-cc.dtb',
        'config': 'libretech-cc_defconfig'
      },
      'nanopi-k2': {
        'dtb': 'meson-gxbb-nanopi-k2.dtb',
        'config': 'nanopi-k2_defconfig'
      },
      'odroid-c2': {
        'dtb': 'meson-gxbb-odroidc2.dtb',
        'config': 'odroid-c2_defconfig'
      },
      'rk3328': {
        'dtb': 'rk3328-box.dtb',
        'config': 'rock64-rk3328_defconfig'
      },
      'rk3399-rock-pi-4': {
        'dtb': 'rk3399-rock-pi-4.dtb',
        'config': 'rock-pi-4-rk3399_config'
      },
      'rk3399-nanopi-m4': {
        'dtb': 'rk3399-nanopi-m4.dtb',
        'config': 'evb-rk3399_config'
      },
      'rk3399': {
        'dtb': 'rk3399-nanopc-t4.dtb',
        'config': 'nanopc-t4-rk3399_config'
      },
      'beelink-gs1' : {
        'dtb' : 'sun50i-h6-beelink-gs1.dtb',
        'config' : 'beelink_gs1_defconfig'
      },
      'orangepi-3': {
        'dtb': 'sun50i-h6-orangepi-3.dtb',
        'config': 'orangepi_3_defconfig'
      },
      'orangepi-one-plus': {
        'dtb': 'sun50i-h6-orangepi-one-plus.dtb',
        'config': 'orangepi_one_plus_defconfig'
      },
      'pine-h64': {
        'dtb': 'sun50i-h6-pine-h64.dtb',
        'config': 'pine_h64_defconfig'
      },
      'tanix-tx6' : {
        'dtb' : 'sun50i-h6-tanix-tx6.dtb',
        'config' : 'eachlink_h6_mini_defconfig'
      },
    },
  },
  'NXP': {
    'iMX6': {
      'cubox-dl': {
        'dtb': 'imx6dl-cubox-i.dtb',
        'config': 'mx6cuboxi_defconfig'
      },
      'cubox-q': {
        'dtb': 'imx6q-cubox-i.dtb',
        'config': 'mx6cuboxi_defconfig'
      },
      'udoo-dl': {
        'dtb': 'imx6dl-udoo.dtb',
        'config': 'udoo_defconfig'
      },
      'udoo-q': {
        'dtb': 'imx6q-udoo.dtb',
        'config': 'udoo_defconfig'
      },
      'wandboard-dl': {
        'dtb': 'imx6dl-wandboard.dtb',
        'config': 'wandboard_defconfig'
      },
      'wandboard-q': {
        'dtb': 'imx6q-wandboard.dtb',
        'config': 'wandboard_defconfig'
      },
    },
  },
  'Qualcomm': {
    'Dragonboard': {
      '410c': {
        'dtb': 'apq8016-sbc.dtb',
        'config': 'dragonboard410c_defconfig'
      },
    },
  },
}

def usage(PROJECT=None, SOC=None, FILE=sys.stdout):
  print('Usage: %s <project> <soc> <board-name> dtb|config' % sys.argv[0], file=FILE)
  print('       %s <project> <soc>' % sys.argv[0], file=FILE)
  print('       %s <project>' % sys.argv[0], file=FILE)
  print('', file=FILE)

  if PROJECT and PROJECT not in devices:
    PROJECT = SOC = None
  if PROJECT and SOC and SOC not in devices[PROJECT]:
    SOC = None

  print('Projects:', file=FILE)
  print('', file=FILE)
  for project in sorted(devices):
    if PROJECT is None or PROJECT == project:
      print('  %s:' % project, file=FILE)
      for soc in sorted(devices[project]):
        if SOC is None or SOC == soc:
          print('    %s:' % soc, file=FILE)
          for board in sorted(devices[project][soc]):
            print('      %s' % board, file=FILE)
          print('', file=FILE)
      print('', file=FILE)

def exit_error(msg, PROJECT=None, SOC=None):
  print(msg, file=sys.stderr)
  print('', file=sys.stderr)
  usage(PROJECT=PROJECT, SOC=SOC, FILE=sys.stderr)
  sys.exit(1)

# Basic argument validation
if len(sys.argv) == 2 and sys.argv[1] in ['help', 'usage']:
  usage()
  sys.exit(0)

if len(sys.argv) > 1 and sys.argv[1] not in devices:
  exit_error('Invalid project: %s' % sys.argv[1])

if len(sys.argv) > 2 and sys.argv[2] not in devices[sys.argv[1]]:
  exit_error('Invalid soc: %s' % sys.argv[2], PROJECT=sys.argv[1])

if len(sys.argv) > 3 and sys.argv[3] not in devices[sys.argv[1]][sys.argv[2]]:
  exit_error('Invalid board-name: %s' % sys.argv[3], PROJECT=sys.argv[1], SOC=sys.argv[2])

if len(sys.argv) == 4:
  exit_error('Invalid option: must specify dtb or config', PROJECT=sys.argv[1], SOC=sys.argv[2])
elif len(sys.argv) > 4 and sys.argv[4] not in ['dtb', 'config']:
  exit_error('Invalid option: %s' % sys.argv[4], PROJECT=sys.argv[1], SOC=sys.argv[2])

if len(sys.argv) > 5:
  exit_error('Invalid number of arguments: %s' % ' '.join(sys.argv[1:]), PROJECT=sys.argv[1], SOC=sys.argv[2])

# Get dtb or u-boot config for a given project, soc, and board
# ./scripts/uboot_helper project device board-name dtb|config
if len(sys.argv) == 5:
  print(devices[sys.argv[1]][sys.argv[2]][sys.argv[3]][sys.argv[4]])

# List boards supported by a given project and soc
# ./scripts/uboot_helper project device
elif len(sys.argv) == 3:
  print(' '.join([board for board in sorted(devices[sys.argv[1]][sys.argv[2]])]))

# List socs supported by a given project
# ./scripts/uboot_helper project
elif len(sys.argv) == 2:
  print(' '.join([soc for soc in sorted(devices[sys.argv[1]])]))

# List projects
# ./scripts/uboot_helper
elif len(sys.argv) == 1:
  print(' '.join([project for project in sorted(devices)]))

sys.exit(0)
